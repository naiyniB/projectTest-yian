name: Deploy

on:
  push:
    branches:
      - "**"  # 监听所有分支的推送事件

permissions:
  contents: write  # 允许写入仓库内容

jobs:

  deploy:
    # 将在 Ubuntu 最新版本上运行
    runs-on: ubuntu-latest
    steps:
      # 将代码签出到工作目录
      - uses: actions/checkout@v2
      # 检查是不是存在public文件夹
      - name: 检查是不是存在public文件夹
        run: |
          if [ -d "public" ]; then
            echo "public 文件夹存在"
          else
            echo "public 文件夹不存在"
            exit 1
          fi
      # 找出public中最新的压缩包
      - name: 找出public中最新的压缩包
        # 进入 public 目录
        run: |
          cd public || { echo "public 目录不存在或无法进入"; exit 1; }
          # 找出最新的压缩包文件
          LATEST_ZIP=$(ls -t *.zip 2>/dev/null | head -n 1)
          if [ -z "$LATEST_ZIP" ]; then
            echo "没有找到压缩包文件"
            exit 1
          else
            echo "最新的压缩包文件是: $LATEST_ZIP"
            # 将最新的压缩包文件路径保存到环境变量中，供后续步骤使用
            echo "LATEST_ZIP=$LATEST_ZIP" >> $GITHUB_ENV
          fi
        # 解压最新的压缩包文件到 temp 目录
      - name: 解压到 temp 目录
        run: |
          cd public || { echo "public 目录不存在或无法进入"; exit 1; }
          unzip -o "$LATEST_ZIP" -d ../temp || { echo "解压失败"; exit 1; }
          echo "解压完成"

      # 显示 temp 目录下的文件列表，确认解压结果
      - name: 清理工作区
        run: |
          echo "清理工作区，保留 .git .github public 目录"

          # 列出根目录下所有条目，逐个判断是否需要删除
          for item in ./*; do
            case "${item#./}" in
              .git|.github|public|temp)
                echo "保留: $item"
                ;;
              *)
                echo "删除: $item"
                rm -rf "$item"
                ;;
            esac
          done
          echo "工作区清理完成"

      # 将 temp 目录下的内容移动到根目录
      - name: 移动内容到根目录
        run: |
          mv temp/* . || { echo "移动文件失败"; exit 1; }
          rm -rf temp || { echo "删除 temp 目录失败"; exit 1; }
          echo "文件移动完成"

      #  删除 public
      - name: 删除 public 目录
        run: |
          rm -rf public || { echo "删除 public 目录失败"; exit 1; }
          echo "public 目录删除完成"
      # 删除 temp
      - name: 删除 temp 目录
        run: |
          rm -rf temp || { echo "删除 temp 目录失败"; exit 1; }
          echo "temp 目录删除完成"
      # 配置 Git 用户信息
      - name: 配置 Git 用户信息
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      # 提交更改并推送到远程仓库
      - name: 提交更改并推送到远程仓库
        run: |
          git add .
          git commit -m "Deploy latest content from public [skip ci]" || echo "没有更改需要提交"
          git push origin {{ github.ref }} || echo "推送失败，可能是因为没有更改"

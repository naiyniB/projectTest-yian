name: 部署

on:
  push:
    paths:
      - 'public/**'
    branches:
      - main  

jobs:
  process-archive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find New Archive in public/
        id: find_archive
        run: |
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | grep "^public/" | grep -E "\.(zip|tar\.gz|tgz|tar)$" | grep -v "^public/\.\(github\|xxx\)/")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No new archive found in public/"
            exit 0
          fi

          # 取最新一个压缩包（按字母排序最后一个）
          LATEST_ARCHIVE=$(echo "$CHANGED_FILES" | tail -n 1)
          echo "Found archive: $LATEST_ARCHIVE"
          
          # 输出到环境变量供后续步骤使用
          echo "archive_path=$LATEST_ARCHIVE" >> $GITHUB_OUTPUT
        shell: bash

      - name: Extract Archive and Replace Root
        if: steps.find_archive.outputs.archive_path != ''
        run: |
          ARCHIVE="${{ steps.find_archive.outputs.archive_path }}"
          FULL_PATH="./$ARCHIVE"

          if [ ! -f "$FULL_PATH" ]; then
            echo "Archive file does not exist: $FULL_PATH"
            exit 1
          fi

          echo "Processing archive: $FULL_PATH"

          # 定义要保留的目录（不删除）
          KEEP_DIRS=( ".github" "public" "xxx" )  # 添加你需要保留的文件夹

          # 删除根目录下所有其他文件和文件夹
          for item in */; do
            dir="${item%/}"
            skip=false
            for keep in "${KEEP_DIRS[@]}"; do
              if [ "$dir" = "$keep" ]; then
                skip=true
                break
              fi
            done
            if [ "$skip" = false ]; then
              rm -rf "./$dir"
            fi
          done

          # 删除非目录文件（除了隐藏文件如 .gitignore 等，按需调整）
          ls -a | grep -v "/$" | grep -E "^[^\.]|^\." | while read file; do
            case "$file" in
              .|..|.git|.gitignore|.gitmodules) continue ;;
              *)
                for keep in "${KEEP_DIRS[@]}"; do
                  [[ "$file" == "$keep" ]] && continue 2
                done
                rm -f "./$file"
                ;;
            esac
          done

          # 创建临时解压目录
          TMP_UNZIP="tmp_unzip"
          mkdir -p "$TMP_UNZIP"

          # 解压文件到临时目录
          case "$FULL_PATH" in
            *.zip)
              unzip -q "$FULL_PATH" -d "$TMP_UNZIP"
              ;;
            *.tar.gz|*.tgz)
              tar -xzf "$FULL_PATH" -C "$TMP_UNZIP"
              ;;
            *.tar)
              tar -xf "$FULL_PATH" -C "$TMP_UNZIP"
              ;;
            *)
              echo "Unsupported archive format: $FULL_PATH"
              exit 1
              ;;
          esac

          # 移动解压内容到根目录
          mv "$TMP_UNZIP"/* ./
          mv "$TMP_UNZIP"./.* ./ 2>/dev/null || true  # 忽略无匹配项

          # 清理临时目录
          rm -rf "$TMP_UNZIP"

          echo "Successfully extracted and replaced root content."

      - name: Clean Public Directory
        run: |
          # 删除 public/ 下所有文件（可选择是否保留 .gitkeep）
          find public -mindepth 1 ! -name '.gitkeep' -exec rm -rf {} +

      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add -A
          if ! git diff-index --quiet HEAD --; then
            git commit -m "feat: update root from latest archive in public"
            git push origin HEAD
          else
            echo "No changes to commit."
          fi
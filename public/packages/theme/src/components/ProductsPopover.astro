---
import { type TProductCategory } from "@rxdrag/website-lib-core";
import { ProductCategoryQueryOptions, ProductCategoryFields, ProductFields, ProductQueryOptions, PublishableStatus } from "@rxdrag/rxcms-models";
import { rx } from "../lib";
import { Popover, Link, Motion, PopoverPanel } from "@rxdrag/website-lib";
import ProductCategory from "./ProductCategory.astro";

interface Props {
  title?: string;
  columns?: [number[], number[]?, number[]?, number[]?, number[]?];
}
const { title = "Products", columns = [[0], [1, 4], [2, 5], [3, 6]] } =
  Astro.props;
const categories = (
  await rx.queryEntityList(
    new ProductCategoryQueryOptions(
      [
        ProductCategoryFields.id,
        ProductCategoryFields.name,
        ProductCategoryFields.slug,
      ],
      {
        where: {
          lang: {
            abbr: {
              _eq: rx.getLang(),
            },
          },
        },
        orderBy: [{ seqValue: "asc" }],
      }
    ).products(
      new ProductQueryOptions(
        [
          ProductFields.id,
          ProductFields.slug,
          ProductFields.title,
          ProductFields.shortTitle,
        ],
        {
          where: {
            showInNavMenu: { _eq: true },
            status: { _eq: PublishableStatus.published },
          },
          orderBy: [{ seqValue: "asc" }],
        }
      )
    ),
    "categories-in-nav"
  )
)?.items as TProductCategory[] | undefined;---

<Popover
  class="flex items-center relative h-[4rem]"
  openableKey="products-popup"
>
  <div class="flex items-center">
    <Link
      class:list={["desk-nav-link", "flex items-center gap-x-1"]}
      type="products"
      activeWhen="/products"
    >
      {title}
    </Link>
    <Motion
      as="span"
      class="h-5 w-5 flex-none text-foreground"
      id="products-arrow"
      whileOpenable={{ open: { rotate: 180 }, close: { rotate: 0 } }}
    >
      <svg
        aria-hidden="true"
        fill="currentColor"
        focusable="false"
        height="1.25rem"
        viewBox="0 0 24 24"
        width="1.25rem"
      >
        <path d="M7.41 8.59 12 13.17l4.59-4.58L18 10l-6 6-6-6z"></path>
      </svg>
    </Motion>
  </div>
  <PopoverPanel
    class:list={[
      "light",
      "max-w-7xl absolute left-1/2 -translate-x-1/2 top-full z-20",
      "w-screen rounded-md bg-surface-card shadow-lg",
      "box-border",
      "h-0 opacity-1 overflow-hidden",
    ]}
    whileOpenable={{
      initial: {
        height: 0,
      },
      open: {
        to: {
          height: "auto",
        },
        duration: 0.6,
        ease: "power3.out",
      },
      close: {
        to: {
          height: 0,
        },
        duration: 0.25,
        ease: "power2.in",
      },
    }}
  >
    <div class="w-full h-full min-h-[20rem] border-t-[6px] border-primary">
      <div class="p-6 grid grid-cols-4 gap-2">
        {
          columns.map((column, index) => (
            <div class={`col-${index + 1}`}>
              {column?.map((index) => (
                <ProductCategory category={categories?.[index]} />
              ))}
            </div>
          ))
        }
      </div>
    </div>
  </PopoverPanel>
</Popover>

<script>
  import { popover } from "@rxdrag/website-lib-core";
  import gsap from "gsap";

  popover.onOpen("products-popup", () => {
    // 旋转箭头图标
    gsap.to("#products-arrow", {
      rotation: 180,
      duration: 0.3,
      ease: "power2.out",
    });

    // 为四列菜单项添加动画，最多5列
    // 为四列菜单项添加动画，最多5列
    for (let i = 1; i <= 5; i++) {
      // 检查是否存在该列的菜单项元素
      const menuItems = document.querySelectorAll(`.col-${i} .menu-item`);
      if (menuItems.length > 0) {
        gsap.fromTo(
          menuItems,
          {
            opacity: 0,
            y: 30,
          },
          {
            opacity: 1,
            y: 0,
            stagger: 0.1,
            duration: 0.5,
            ease: "power3.out",
            overwrite: true,
          }
        );
      }
    }
  });
</script>
